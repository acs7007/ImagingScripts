%Script to run NormCorre on Columbia high performance computer


function [saveFilePath] = stabilizeVideos(filePath, fileSize, trialLength, numTrials)




% %initiate matlab
% module load matlab/2016b
% 
% matlab


%% add paths and initiate parallel pool


% add NormCorre folders/ functions to matlab pat


%add folders to matlab path
cd /rigel/zi/users/acs2129/software/NoRMCorre-master
addpath('/rigel/zi/users/acs2129/software/NoRMCorre-master')




%detect cores:
cores = feature('numcores') -1;
%initiate parallel pool, with n-1 cores
parpool('local',cores)


%variables for saving
saveFilePath = strcat(filePath, 'analyzed');
fileBase = 'part-';
fileExtension = '.tiff';


%% get all movie files from all sub-directories


loadFilePath = dir(strcat(filePath, '**/*.tif'));
%make empty array to load files into
y = [];


for i = 1:length(dir(loadFilePath))
    
    fileName = strcat(loadFilePath(i).folder,'/',loadFilePath(i).name);
    
    disp([ 'Loading File:   ', loadFilePath(i).name])
    
    
    y = cat(3, y, single(bigread2(fileName)));
    
end


[~, ~, rawSize]= size(y);




try
    trialLength*numTrials == rawSize;
    
catch
    
    warning('Not concatenating expected number of frames')
    
end




%downsample movie by a factor of 3
Yf = downsample_data(y,'time',3);


%get dimensions of movie
[d1, d2, T ] = size(Yf);












%% Run NormCorre on Yf, the concatenated downsampled raw movie
%perform image filtering
if (0)    
    hLarge = fspecial('average', 40);
    hSmall = fspecial('average', 2); 
    for t = 1:T
        Y(:,:,t) = filter2(hSmall,Yf(:,:,t)) - filter2(hLarge, Yf(:,:,t));
    end
    %Ypc = Yf - Y;
    bound = size(hLarge,1);
else
    gSig = 7; 
    gSiz = 17; 
    psf = fspecial('gaussian', round(gSiz), gSig);
    ind_nonzero = (psf(:)>=max(psf(:,1)));
    psf = psf-mean(psf(ind_nonzero));
    psf(~ind_nonzero) = 0;   % only use pixels within the center disk
    Y = imfilter(Yf,psf,'same');
    %Ypc = Yf - Y;
    bound = 2*ceil(gSiz/2);
end


%options for rigid motion correction
options_r = NoRMCorreSetParms('d1',d1-bound,'d2',d2-bound,'bin_width',50,'max_shift',20,'iter',1,'correct_bidir',false);
%perform rigid motion correction 
tic; [M1,shifts1,template1] = normcorre_batch(Y(bound/2+1:end-bound/2,bound/2+1:end-bound/2,:),options_r); toc %


%options for non-rigid motion correction
options_nr = NoRMCorreSetParms('d1',d1-bound,'d2',d2-bound,'bin_width',50, ...
    'grid_size',[128,128],'mot_uf',4,'correct_bidir',false, ...
    'overlap_pre',32,'overlap_post',32,'max_shift',20);


%perform and apply non-rigid motion correction
tic; [M2,shifts2,template2] = normcorre_batch(Y(bound/2+1:end-bound/2,bound/2+1:end-bound/2,:),options_nr,template1); toc 
tic; Mpr = apply_shifts(Yf,shifts2,options_nr,bound/2,bound/2); toc 




%%%% Save filtered, non-rigid motion corrected video


% clear intermediate and raw values from memory
clear M1
clear M2
clear Y
clear Yf
clear shifts1
clear shifts2




%options for saving movie
options.color     = false;
options.compress  = 'no';
options.message   = true;
options.append    = false;
options.overwrite = false;
options.big       = true;


%% Automatically save files in 2000-frame chunks with automatic file naming:


%determine length of movie and number of times to run saveastiff command
%first check to see if movie is an even number of multiples of max filesize


remainder = mod(length(Mpr),fileSize);


%when num frames is an even multiple of filesize:
if remainder == 0
    
    fileIndex = length(Mpr)/fileSize;
    
    for i = 1:fileIndex
        
        frames(i,2) = i*fileSize;
        frames(i,1) = frames(i,2) - fileSize + 1;
        
    end


%what to do if there are "leftover" frames:
else
    
    fileIndex = ceil(length(Mpr)/fileSize);
    
    for i = 1:fileIndex
        
        if i == fileIndex
            
            frames(i,2) = (i-1)*fileSize + remainder;
            frames(i,1) = frames(i-1,2) + 1;
        else
            frames(i,2) = i*fileSize;
            frames(i,1) = frames(i,2) - fileSize + 1;
        end
        
        
    end
end


%save files in appropriate location using predefined filenames


%variables were defined earlier in program... 


for i = 1:fileIndex
    
filename = [saveFilePath,fileBase, num2str(i),fileExtension];
 
res2 = saveastiff(Mpr(:,:,frames(i,1):frames(i,2)),filename,options);


end
    




end
